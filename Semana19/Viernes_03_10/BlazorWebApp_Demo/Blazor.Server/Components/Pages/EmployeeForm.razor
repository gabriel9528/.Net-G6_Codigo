@page "/employees"
@page "/employees/create"
@page "/employees/edit/{Id:int}"
@using Blazor.Server.Models
@using Blazor.Server.Services
@inject EmployeeService EmployeeService
@inject DepartmentService DepartmentService
@inject NavigationManager Navigation

<h3>@Title</h3>

<EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="name">Nombre:</label>
        <InputText id="name" @bind-Value="employee.Name" class="form-control" />
        <ValidationMessage For="@(() => employee.Name)" />
    </div>

    <div class="form-group mb-3">
        <label for="salary">Salario:</label>
        <InputNumber id="salary" @bind-Value="employee.Salary" class="form-control" />
        <ValidationMessage For="@(() => employee.Salary)" />
    </div>

    <div class="form-group mb-3">
        <label for="dateContract">Fecha de Contrato:</label>
        <InputDate id="dateContract" @bind-Value="employee.DateContract" class="form-control" />
        <ValidationMessage For="@(() => employee.DateContract)" />
    </div>

    <div class="form-group mb-3">
        <label for="department">Departamento:</label>
        <InputSelect id="department" @bind-Value="employee.IdDepartment" class="form-control">
            <option value="">Seleccione un departamento</option>
            @foreach (var department in departments)
            {
                <option value="@department.Id">@department.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => employee.IdDepartment)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-success me-2">@ButtonText</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Employee employee = new();
    private List<Department> departments = new();
    private string Title => Id == 0 ? "Crear Empleado" : "Editar Empleado";
    private string ButtonText => Id == 0 ? "Crear" : "Actualizar";

    protected override async Task OnInitializedAsync()
    {
        departments = await DepartmentService.GetDepartmentsAsync();

        if (Id > 0)
        {
            var existingEmployee = await EmployeeService.GetEmployeeByIdAsync(Id);
            if (existingEmployee != null)
            {
                employee = existingEmployee;
            }
        }
        else
        {
            employee.DateContract = DateOnly.FromDateTime(DateTime.Today);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id == 0)
        {
            await EmployeeService.CreateEmployeeAsync(employee);
        }
        // else
        // {
        //     await EmployeeService.UpdateEmployeeAsync(employee);
        // }

        Navigation.NavigateTo("/employees");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/employees");
    }
}